package com.hike.stealth.service.impl;

import com.hike.stealth.service.IStealthDataService;
import com.hike.stealth.service.IStealthService;


public class StealthService implements IStealthService{

	private IStealthDataService stealthDataService = StealthDataService.getInstance();
    private Thread thread1;
    
	/**
	 * This will sleep current thread 
	 */
	@Override
	public String sleepAndGet(Integer timeout, Integer connectionId) {
		try {
			Long currentTime = getStealthDataService().getDataByConnectionId(connectionId);
			
			if(currentTime!=null){
				return "{\"stat\":\"Connection Already Present with this ConnectionId \"}";
			}
			
		    Thread.currentThread().setName(connectionId.toString());
		    getStealthDataService().saveData(connectionId, System.currentTimeMillis());
		    
		    System.out.println(Thread.currentThread().getId() + " " + Thread.currentThread().getName());
			thread1 = Thread.currentThread();
		    Thread.sleep(timeout*1000);
		} catch (InterruptedException e) {
			System.out.println("Thread got interrupted with id " + Thread.currentThread().getId() + " " +  Thread.currentThread().getName() + " " + e.getMessage());
			return "{\"stat\":\"Killed \"}";
		}finally{
			getStealthDataService().removeData(connectionId);	
		}
		return "{\"stat\":\"ok\"}";
	}

	@Override
	public String getServerStatus() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String kill(Integer connectionId) {
		Long currentTime = getStealthDataService().getDataByConnectionId(connectionId);
		if(currentTime == null){
			return "{\"stat\":\"No Connection Present with this Connection Id \"}";
		}
		Thread thread = new Thread(connectionId.toString());
		thread.interrupt();
		return "{\"stat\":\"ok\"}";
	}

	public IStealthDataService getStealthDataService() {
		return stealthDataService;
	}

}
